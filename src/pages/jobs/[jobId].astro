import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  try {
    const response = await fetch('https://job-board-api.randyh628.workers.dev/');
    if (!response.ok) {
      console.error('Failed to fetch jobs for static paths:', response.status, await response.text());
      return [];
    }
    const jobs = await response.json();
    if (!Array.isArray(jobs)) {
      console.error('Fetched data is not an array:', jobs);
      return [];
    }
    return jobs.map((job) => ({
      params: { jobId: String(job.id) },
      props: { job },
    }));
  } catch (error) {
    console.error('Error fetching jobs for static paths:', error);
    return [];
  }
}

const { jobId } = Astro.params;
const { job } = Astro.props;

let jobDetails = null;
let fetchError = null;

// This part is primarily for client-side rendering or if getStaticPaths fails/is not used as expected.
// Astro.props.job should ideally provide the job data directly.
if (!job) {
  try {
    const response = await fetch('https://job-board-api.randyh628.workers.dev/');
    if (!response.ok) {
      throw new Error(`Failed to fetch job details: ${response.status}`);
    }
    const jobs = await response.json();
    if (Array.isArray(jobs)) {
      jobDetails = jobs.find(j => String(j.id) === String(jobId));
    } else {
      throw new Error('Job data is not in expected format (array).');
    }
    if (!jobDetails) {
      fetchError = 'Job not found.';
    }
  } catch (error) {
    console.error('Error fetching job details:', error);
    fetchError = error.message;
  }
} else {
  jobDetails = job;
}

<BaseLayout title={jobDetails ? jobDetails.title : 'Job Details'}>
  {jobDetails ? (
    <article class="job-detail">
      <h1>{jobDetails.title}</h1>
      <p><strong>Company:</strong> {jobDetails.company}</p>
      <p><strong>Salary:</strong> {jobDetails.salary}</p>
      <p><strong>Posted:</strong> {new Date(jobDetails.date_posted).toLocaleDateString()}</p>
      <div class="job-description">
        <h2>Job Description</h2>
        <p>{jobDetails.description || 'No description provided.'}</p>
      </div>
      {jobDetails.job_url && (
        <a href={jobDetails.job_url} target="_blank" rel="noopener noreferrer" class="apply-button">
          Apply Now
        </a>
      )}
    </article>
  ) : fetchError ? (
    <p>Error loading job details: {fetchError}</p>
  ) : (
    <p>Job not found or still loading...</p>
  )}
</BaseLayout>

<style>
  .job-detail {
    max-width: 800px;
    margin: 2rem auto;
    padding: 2rem;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
  }
  .job-detail h1 {
    color: #333;
    margin-bottom: 0.5rem;
  }
  .job-detail p {
    color: #555;
    line-height: 1.6;
    margin-bottom: 0.75rem;
  }
  .job-detail strong {
    color: #333;
  }
  .job-description {
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  .job-description h2 {
    color: #333;
    margin-bottom: 0.5rem;
    font-size: 1.25rem;
  }
  .apply-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: #007bff;
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: bold;
    transition: background-color 0.2s ease-in-out;
  }
  .apply-button:hover {
    background-color: #0056b3;
    text-decoration: none;
  }
</style> 