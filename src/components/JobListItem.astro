---
// src/components/JobListItem.astro
export interface Props {
  title: string;
  // location: string; // Removed as all jobs are remote
  salary: string; // Or number, consider formatting
  datePosted: string; // Or Date object, consider formatting
  companyName: string;
  jobId: string | number;
  jobUrl?: string;
}

const { title, salary, datePosted, companyName, jobId, jobUrl } = Astro.props;
const detailUrl = `/jobs/${jobId}`; // Assuming a routing structure like /jobs/[id]

// Function to format relative time
function getRelativeTime(dateString: string) {
  const date = new Date(dateString);
  const now = new Date();
  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
  
  const intervals = {
    year: 31536000,
    month: 2592000,
    week: 604800,
    day: 86400,
    hour: 3600,
    minute: 60
  };

  for (const [unit, seconds] of Object.entries(intervals)) {
    const interval = Math.floor(diffInSeconds / seconds);
    if (interval >= 1) {
      return interval === 1 ? `1 ${unit} ago` : `${interval} ${unit}s ago`;
    }
  }
  
  return 'just now';
}
---

<div class="job-list-item">
  <div class="job-content">
    <div class="job-main">
      <h3><a href={detailUrl}>{title}</a></h3>
      <p class="company">{companyName}</p>
      {salary && salary.length > 0 && <p class="salary">{salary}</p>}
      <p class="date">{getRelativeTime(datePosted)}</p>
    </div>
    {jobUrl && (
      <div class="action-area">
        <a href={jobUrl} class="apply-button" target="_blank" rel="noopener noreferrer">
          Apply Now
        </a>
      </div>
    )}
  </div>
</div>

<style>
  /* Basic styling for the component */
  .job-list-item {
    border: 1px solid #eee;
    padding: 1.5rem;
    margin-bottom: 0;
    border-radius: 12px;
    background: white;
    transition: transform 0.2s, box-shadow 0.2s;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .job-list-item:hover {
    transform: translateY(-2px);
    box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
  }

  .job-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    gap: 1rem;
  }

  .job-main {
    flex: 1;
  }

  .job-list-item h3 {
    margin: 0 0 0.75rem 0;
    font-size: 1.35rem;
  }

  .job-list-item h3 a {
    text-decoration: none;
    color: #1a365d; /* Dark navy */
    transition: color 0.2s;
  }

  .job-list-item h3 a:hover {
    color: #2c974b;
  }

  .company {
    color: #4a5568;
    font-weight: 500;
    margin: 0.35rem 0;
    font-size: 1.1rem;
  }

  .salary {
    color: #2c974b;
    font-weight: 600;
    margin: 0.35rem 0;
    font-size: 1.1rem;
  }

  .date {
    color: #718096;
    font-size: 0.9rem;
    margin: 0.35rem 0 0 0;
  }

  .apply-button {
    display: inline-block;
    background-color: #2c974b;
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.95rem;
    transition: background-color 0.2s, transform 0.2s;
    white-space: nowrap;
  }

  .apply-button:hover {
    background-color: #218838;
    transform: translateY(-1px);
  }

  @media (max-width: 640px) {
    .job-content {
      flex-direction: column;
    }

    .action-area {
      width: 100%;
      margin-top: 1rem;
    }

    .apply-button {
      width: 100%;
      text-align: center;
    }
  }
</style> 